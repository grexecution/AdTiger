generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String                @id @default(cuid())
  name                  String
  subscriptionTier      SubscriptionTier      @default(FREE)
  subscriptionStatus    SubscriptionStatus    @default(ACTIVE)
  subscriptionExpiresAt DateTime?
  billingEmail          String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  currency              String                @default("USD")
  ads                   Ad[]
  adAccounts            AdAccount[]
  adGroups              AdGroup[]
  campaigns             Campaign[]
  changeHistory         ChangeHistory[]
  connections           Connection[]
  feedbacks             Feedback[]
  insights              Insight[]
  performanceSnapshots  PerformanceSnapshot[]
  performanceTrends     PerformanceTrend[]
  providerConnections   ProviderConnection[]
  recommendations       Recommendation[]
  syncHistory           SyncHistory[]
  users                 User[]

  @@index([subscriptionTier])
  @@index([subscriptionStatus])
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  accountId String?
  role      UserRole  @default(CUSTOMER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  image     String?
  metadata  Json?
  sessions  Session[]
  account   Account?  @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@index([email])
  @@index([role])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ProviderConnection {
  id                String    @id @default(cuid())
  accountId         String
  provider          String
  externalAccountId String
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?
  metadata          Json?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastSyncAt        DateTime?
  nextSyncAt        DateTime?
  status            String    @default("CONNECTED")
  syncErrors        Json?
  account           Account   @relation(fields: [accountId], references: [id])

  @@unique([accountId, provider, externalAccountId])
  @@index([accountId])
  @@index([provider])
  @@index([status])
}

model Connection {
  id          String   @id @default(cuid())
  accountId   String
  provider    String
  status      String
  credentials Json?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  account     Account  @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@index([provider])
}

model AdAccount {
  id         String     @id @default(cuid())
  accountId  String
  provider   String
  externalId String
  name       String
  currency   String?
  timezone   String?
  status     String?
  metadata   Json?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  account    Account    @relation(fields: [accountId], references: [id])
  campaigns  Campaign[]
  insights   Insight[]

  @@unique([accountId, provider, externalId])
  @@index([accountId])
  @@index([provider])
}

model Campaign {
  id             String          @id @default(cuid())
  accountId      String
  adAccountId    String
  provider       String
  channel        String? // e.g., "facebook", "instagram", "google_search", "youtube"
  externalId     String
  name           String
  status         String?
  objective      String?
  metadata       Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  budgetAmount   Float?
  budgetCurrency String?
  adGroups       AdGroup[]
  account        Account         @relation(fields: [accountId], references: [id])
  adAccount      AdAccount       @relation(fields: [adAccountId], references: [id])
  changeHistory  ChangeHistory[]
  insights       Insight[]

  @@unique([accountId, provider, externalId])
  @@index([accountId])
  @@index([adAccountId])
  @@index([provider])
  @@index([channel])
}

model AdGroup {
  id             String          @id @default(cuid())
  accountId      String
  campaignId     String
  provider       String
  channel        String? // inherited from campaign
  externalId     String
  name           String
  status         String?
  metadata       Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  budgetAmount   Float?
  budgetCurrency String?
  ads            Ad[]
  account        Account         @relation(fields: [accountId], references: [id])
  campaign       Campaign        @relation(fields: [campaignId], references: [id])
  changeHistory  ChangeHistory[]
  insights       Insight[]

  @@unique([accountId, provider, externalId])
  @@index([accountId])
  @@index([campaignId])
  @@index([provider])
  @@index([channel])
}

model Ad {
  id            String          @id @default(cuid())
  accountId     String
  adGroupId     String
  provider      String
  channel       String? // inherited from campaign
  externalId    String
  name          String
  status        String?
  creative      Json?
  metadata      Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  account       Account         @relation(fields: [accountId], references: [id])
  adGroup       AdGroup         @relation(fields: [adGroupId], references: [id])
  changeHistory ChangeHistory[]
  insights      Insight[]

  @@unique([accountId, provider, externalId])
  @@index([accountId])
  @@index([adGroupId])
  @@index([provider])
  @@index([channel])
}

model Insight {
  id          String     @id @default(cuid())
  accountId   String
  provider    String
  entityType  String
  entityId    String
  date        DateTime   @db.Date
  window      String
  metrics     Json
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  adAccountId String?
  campaignId  String?
  adGroupId   String?
  adId        String?
  account     Account    @relation(fields: [accountId], references: [id])
  adAccount   AdAccount? @relation(fields: [adAccountId], references: [id])
  adGroup     AdGroup?   @relation(fields: [adGroupId], references: [id])
  ad          Ad?        @relation(fields: [adId], references: [id])
  campaign    Campaign?  @relation(fields: [campaignId], references: [id])

  @@unique([accountId, provider, entityType, entityId, date, window])
  @@index([accountId])
  @@index([provider])
  @@index([entityType])
  @@index([date])
  @@index([window])
  @@index([campaignId, date])
  @@index([adGroupId, date])
  @@index([adId, date])
}

model PerformanceTrend {
  id             String   @id @default(cuid())
  accountId      String
  entityType     String
  entityId       String
  provider       String
  period         String
  trendData      Json
  avgMetrics     Json
  minMetrics     Json
  maxMetrics     Json
  trendScore     Float
  volatility     Float
  lastCalculated DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  account        Account  @relation(fields: [accountId], references: [id])

  @@unique([accountId, entityType, entityId, provider, period])
  @@index([entityType, entityId])
  @@index([lastCalculated])
}

model PerformanceSnapshot {
  id           String   @id @default(cuid())
  accountId    String
  entityType   String
  entityId     String
  provider     String
  snapshotType String
  periodStart  DateTime
  periodEnd    DateTime
  metrics      Json
  comparison   Json
  createdAt    DateTime @default(now())
  account      Account  @relation(fields: [accountId], references: [id])

  @@unique([accountId, entityType, entityId, snapshotType, periodStart])
  @@index([entityType, entityId])
  @@index([periodStart])
}

model Recommendation {
  id                String     @id @default(cuid())
  accountId         String
  provider          String
  entityType        String
  entityId          String
  playbookId        String
  ruleId            String
  title             String
  description       String
  priority          String
  category          String
  status            String     @default("proposed")
  snoozedUntil      DateTime?
  appliedAt         DateTime?
  aiExplanation     String?
  aiModel           String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  acceptedAt        DateTime?
  applicationResult Json?
  confidence        Float      @default(0.5)
  estimatedImpact   Json?
  expiresAt         DateTime?
  metricsSnapshot   Json?
  payload           Json
  playbookKey       String
  rejectedAt        DateTime?
  revertReason      String?
  revertedAt        DateTime?
  ruleKey           String
  scopeId           String
  scopeType         String
  score             Float      @default(0)
  statusReason      String?
  type              String
  feedbacks         Feedback[]
  account           Account    @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@index([provider])
  @@index([scopeType])
  @@index([scopeId])
  @@index([status])
  @@index([score])
  @@index([createdAt])
  @@index([playbookKey])
}

model ChangeHistory {
  id         String    @id @default(cuid())
  accountId  String
  entityType String
  entityId   String
  externalId String
  provider   String
  changeType String
  fieldName  String
  oldValue   Json?
  newValue   Json?
  syncJobId  String?
  detectedAt DateTime  @default(now())
  campaignId String?
  adGroupId  String?
  adId       String?
  account    Account   @relation(fields: [accountId], references: [id])
  adGroup    AdGroup?  @relation(fields: [adGroupId], references: [id])
  ad         Ad?       @relation(fields: [adId], references: [id])
  campaign   Campaign? @relation(fields: [campaignId], references: [id])

  @@index([accountId])
  @@index([entityType])
  @@index([entityId])
  @@index([provider])
  @@index([detectedAt])
  @@index([changeType])
  @@index([campaignId])
  @@index([adGroupId])
  @@index([adId])
}

model Feedback {
  id               String         @id @default(cuid())
  accountId        String
  recommendationId String
  userId           String
  createdAt        DateTime       @default(now())
  label            FeedbackLabel  @default(IGNORED)
  note             String?
  updatedAt        DateTime       @updatedAt
  account          Account        @relation(fields: [accountId], references: [id])
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id])

  @@unique([recommendationId, userId])
  @@index([accountId])
  @@index([recommendationId])
  @@index([userId])
  @@index([label])
}

model PlaybookAnalytics {
  id              String   @id @default(cuid())
  accountId       String
  playbookKey     String
  date            DateTime @db.Date
  proposalsCount  Int      @default(0)
  acceptedCount   Int      @default(0)
  rejectedCount   Int      @default(0)
  ignoredCount    Int      @default(0)
  acceptRate      Float    @default(0)
  rejectRate      Float    @default(0)
  estimatedImpact Json?
  actualImpact    Json?
  rejectReasons   Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([accountId, playbookKey, date])
  @@index([accountId])
  @@index([playbookKey])
  @@index([date])
}

model AdaptiveTuningSuggestion {
  id              String    @id @default(cuid())
  accountId       String
  playbookKey     String
  suggestionType  String
  currentConfig   Json
  suggestedConfig Json
  reason          String
  metrics         Json
  confidence      Float     @default(0.7)
  status          String    @default("pending")
  appliedAt       DateTime?
  dismissedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([accountId])
  @@index([playbookKey])
  @@index([status])
}

model NotificationSettings {
  id                String   @id @default(cuid())
  accountId         String   @unique
  userId            String?
  emailEnabled      Boolean  @default(true)
  slackEnabled      Boolean  @default(false)
  webhookEnabled    Boolean  @default(false)
  emailAddresses    String[]
  slackWebhookUrl   String?
  customWebhookUrl  String?
  frequency         String   @default("daily")
  dailyTime         String?
  weeklyDay         String?
  timezone          String   @default("UTC")
  quietHoursEnabled Boolean  @default(false)
  quietHoursStart   String?
  quietHoursEnd     String?
  minPriority       String   @default("medium")
  categories        String[]
  providers         String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([accountId])
  @@index([userId])
}

model NotificationQueue {
  id           String    @id @default(cuid())
  accountId    String
  userId       String?
  type         String
  channel      String
  subject      String
  content      Json
  metadata     Json?
  status       String    @default("pending")
  attempts     Int       @default(0)
  sentAt       DateTime?
  failedAt     DateTime?
  error        String?
  scheduledFor DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([accountId])
  @@index([status])
  @@index([scheduledFor])
  @@index([channel])
}

model SyncJob {
  id            String    @id @default(cuid())
  accountId     String
  provider      String
  type          String
  scope         Json?
  status        String    @default("pending")
  startedAt     DateTime?
  completedAt   DateTime?
  recordsSynced Int       @default(0)
  errors        Json?
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([accountId])
  @@index([provider])
  @@index([status])
  @@index([type])
}

model SyncHistory {
  id            String       @id @default(cuid())
  accountId     String
  provider      SyncProvider
  syncType      SyncType
  status        SyncStatus
  startedAt     DateTime
  completedAt   DateTime?
  duration      Int?
  campaignsSync Int          @default(0)
  adGroupsSync  Int          @default(0)
  adsSync       Int          @default(0)
  insightsSync  Int          @default(0)
  errorMessage  String?
  errorCategory String?
  retryCount    Int          @default(0)
  queueJobId    String?
  priority      Int?
  metadata      Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  account       Account      @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@index([provider])
  @@index([syncType])
  @@index([status])
  @@index([startedAt])
}

enum FeedbackLabel {
  THUMBS_UP
  THUMBS_DOWN
  IGNORED
}

enum SyncProvider {
  META
  GOOGLE
}

enum SyncType {
  FULL
  INCREMENTAL
  MANUAL
}

enum SyncStatus {
  SUCCESS
  FAILED
  CANCELLED
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum SubscriptionTier {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  TRIAL
  PAST_DUE
  CANCELLED
  EXPIRED
}
